#include<bits/stdc++.h>
using namespace std;

void buildTree(int* arr,int* tree,int start,int end,int treeNode){
    if(start==end) {
        tree[treeNode] = arr[start];
        return;
    }
    int mid = (start+end)/2;
    buildTree(arr,tree, start,mid,2*treeNode);
    buildTree(arr,tree,mid+1,end,2*treeNode+1);
    tree[treeNode] = min(tree[2*treeNode],tree[2*treeNode+1]);
}

void updateTree(int* arr,int* tree,int start,int end,int treeNode,int idx,int value){
    if(start==end) {
        arr[idx] = value;
        tree[treeNode] = value;
        return;
    }
    int mid = (start+end)/2;
    if(idx> mid){
        //right jana
        updateTree(arr,tree,mid+1,end,2*treeNode+1,idx,value);
    }else{
        //left jana
        updateTree(arr,tree,start,mid,2*treeNode,idx,value);
    }
    tree[treeNode] = min(tree[2*treeNode],tree[2*treeNode+1]);
}

int query(int* tree,int start,int end,int treeNode,int left,int right){
    //completely outside
    if(end<left || start>right) return INT_MAX;
    //completely inside
    if(left<=start && end<=right) return tree[treeNode];
    //partially inside and partially outside
    int mid = (start+end)/2;
    int ans1 = query(tree,start,mid,2*treeNode,left,right);
    int ans2 = query(tree,mid+1,end,2*treeNode+1,left,right);
    return min(ans1,ans2);
}

int main(){
    int n,q;
    cin>>n>>q;
    int* arr = new int[n];
    for(int i=0;i<n;i++) cin>>arr[i];
    int* tree = new int[4*n];
    buildTree(arr,tree,0,n-1,1);
    while(q--){
        char c;
        int left,right,index,value;
        cin>>c;
        if(c=='q') {
            cin>>left>>right;
            cout<<query(tree,0,n-1,1,left-1,right-1)<<endl;
        }else{
            cin>>index>>value;
            updateTree(arr,tree,0,n-1,1,index-1,value);
        }
    }
    return 0;
}
