#include <bits/stdc++.h>
using namespace std;

struct Edge{ 
    int src;
    int dest;
    int weight;
};

bool compare(Edge a,Edge b){
    return a.weight<b.weight;
}

int getParent(int v,int* parent){
    if(parent[v]==v) return v;
    return getParent(parent[v],parent);
}

Edge* kruskal(Edge* input,int V,int E){
    sort(input,input+E,compare);
    Edge* output = new Edge[V-1];
    int* parent = new int[V];
    for(int i=0;i<V;i++) parent[i]=i;
    int count=0;
    int k=0;
    while(count<(V-1)){
        Edge currEdge = input[k];
        //source Vertex ka topMost Parent
        int  srcParent= getParent(currEdge.src,parent);
        //destination Vertex ka topMost Parent
        int destParent = getParent(currEdge.dest,parent);
        if(srcParent!=destParent){
            count++;
            parent[destParent] = srcParent;
            output[count] = currEdge;
        }
        k++;
    }
    return output;
}

int main()
{
    int V, E;
    cin >> V >> E;
    Edge* input = new Edge[E];
    for(int i=0;i<E;i++){
        int s,d,w;
        cin>>s>>d>>w;
        input[i].src=s;
        input[i].dest=d;
        input[i].weight=w;
    }
    Edge* output = kruskal(input,V,E);
    for(int i=1;i<V;i++){
        if(output[i].src<output[i].dest){
            cout<<output[i].src<<" "<<output[i].dest<<" "<<output[i].weight<<endl;
        }else 
            cout<<output[i].dest<<" "<<output[i].src<<" "<<output[i].weight<<endl;
    }
    return 0;
}

                                              //ORRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR
                                              
#include <bits/stdc++.h>
using namespace std;

struct Edge{ 
    int src;
    int dest;
    int weight;
};

bool compare(Edge a,Edge b){
    return a.weight<b.weight;
}

int getParent(int v,int* parent){
    if(parent[v]==v) return v;
    return getParent(parent[v],parent);
}

int main()
{
    int V, E, tempX, tempY;
    cin >> V >> E;
    Edge* input = new Edge[E];
    for(int i=0;i<E;i++){
        int s,d,w;
        cin>>s>>d>>w;
        input[i].src=s;
        input[i].dest=d;
        input[i].weight=w;
    }
    sort(input,input+E,compare);
    int count=0;
    Edge* output = new Edge[E];
    int* parent = new int[E];
    for(int i=0;i<E;i++) parent[i]=i;
    int k=0,m=0;
    while(count<(V-1)){
        int v1,v2,p1,p2;
        v1 = input[k].src;
        v2 = input[k].dest;
        p1 = getParent(v1,parent);
        p2 = getParent(v2,parent);
        if(p1!=p2){
            count++;
            parent[p1] = p2;
            output[m].src = v1;
            output[m].dest = v2;
            output[m].weight = input[k].weight;
            m++;
        }
        k++;
    }
    for(int i=0;i<m;i++){
        if(output[i].src<=output[i].dest){
            cout<<output[i].src<<" "<<output[i].dest<<" "<<output[i].weight<<endl;
        }else 
            cout<<output[i].dest<<" "<<output[i].src<<" "<<output[i].weight<<endl;
    }
    return 0;
}
