#include <bits/stdc++.h>
using namespace std;

vector<string> grid(10);
vector<string> words;
bool f;

void call(int ind)
{
    if(!f) {
        return;
    }
    if(ind == words.size()) {
        if(f) {
            for(auto word: grid) {
                cout<<word<<endl;
            }
            f=false;
        }
        return;
    }
    int i,j,p,q,k;
    for(i=0;i<10;++i) {
        for(j=0;j<10;++j) {
            p=i,q=j;
            for(k=0;k<words[ind].size() && p+k<10;++k) {
                if(grid[p+k][q] != '-' && grid[p+k][q] != words[ind][k]) {
                    break;
                }
            }

            if(k==words[ind].size()) {
                vector<string> temp = grid;
                for(k=0;k<words[ind].size();++k) {
                    grid[p+k][q] = words[ind][k];
                }
                call(ind+1);
                grid = temp;
            }

            for(k=0;k<words[ind].size() && q+k<10;++k) {
                if(grid[p][q+k] != '-' && grid[p][q+k] != words[ind][k]) {
                    break;
                }
            }

            if(k==words[ind].size()) {
                vector<string> temp = grid;
                for(k=0;k<words[ind].size();++k) {
                    grid[p][q+k] = words[ind][k];
                }
                call(ind+1);
                grid = temp;
            }
        }
    }
}

int main()
{
    f=true;

    int i,j;
    for(i=0;i<10;++i) {
        cin>>grid[i];
    }

    string s,w;
    cin>>w;

    for(auto x: w) {
        if(x==';') {
            words.push_back(s);
            s="";
        } else
            s+=x;
    }
    words.push_back(s);
    call(0);

    return 0;
}

                                  //ORRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

#include <bits/stdc++.h> 
using namespace std; 


vector<string> checkHorizontal(int x, int y, vector<string> matrix, string currentWord) 
{ 
    int n = currentWord.length(); 
    for (int i = 0; i < n; i++) { 
        if (matrix[x][y + i] == '-' ||  
            matrix[x][y + i] == currentWord[i]) { 
            matrix[x][y + i] = currentWord[i]; 
        } 
        else { 
            matrix[0][0] = '@'; 
            return matrix; 
        } 
    } 
  
    return matrix; 
} 
  
vector<string> checkVertical(int x, int y, vector<string> matrix, string currentWord) 
{ 
    int n = currentWord.length(); 
  
    for (int i = 0; i < n; i++) { 
        if (matrix[x + i][y] == '-' ||  
            matrix[x + i][y] == currentWord[i]) { 
            matrix[x + i][y] = currentWord[i]; 
        } 
        else { 
  
            matrix[0][0] = '@'; 
            return matrix; 
        } 
    } 
    return matrix; 
} 
  
void solvePuzzle(vector<string>& words, 
                 vector<string> matrix, 
                 int index, int n) 
{ 
    if (index < words.size()) { 
        string currentWord = words[index]; 
        int maxLen = n - currentWord.length(); 
  
        for (int i = 0; i < n; i++) { 
            for (int j = 0; j <= maxLen; j++) { 
                vector<string> temp = checkVertical(j, i, matrix, currentWord); 
  
                if (temp[0][0] != '@') { 
                    solvePuzzle(words, temp, index + 1, n); 
                } 
            } 
        } 
  
        for (int i = 0; i < n; i++) { 
            for (int j = 0; j <= maxLen; j++) { 
                vector<string> temp = checkHorizontal(i, j, matrix, currentWord); 
  
                if (temp[0][0] != '@') { 
                    solvePuzzle(words, temp, index + 1, n); 
                } 
            } 
        } 
    } 
    else {
        for (int i = 0; i < n; i++) 
            cout << matrix[i] << endl; 
        return; 
    } 
} 
  
int main() 
{ 
    int n1 = 10; 
  
    vector<string> matrix; 
    string s;

    for(int i=0;i<10;i++){
        cin>>s;
        matrix.push_back(s);
    }
    vector<string> words; 
    string str;
    cin>>str;
    stringstream ss( str );
    while( ss.good() ){
        string substr;
        getline( ss, substr, ';' );
        words.push_back( substr );
    }
    solvePuzzle(words, matrix, 0, n1);
    return 0; 
} 
