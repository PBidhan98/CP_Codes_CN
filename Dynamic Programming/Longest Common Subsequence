//Iterative

#include<iostream>
#include<cstring>
using namespace std;

int lcs(string s1, string s2){
    int m = s1.length();
    int n = s2.length();
    int** dp = new int*[m+1];
    for(int i=0;i<=m;i++)
        dp[i] = new int[n+1];
    for(int i=0;i<=m;i++)
        dp[i][0] = 0;
    for(int i=0;i<=n;i++)
        dp[0][i] = 0;
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(s1[m-i] == s2[n-j])
                dp[i][j] = 1 + dp[i-1][j-1];
            else 
                dp[i][j] = max(dp[i][j-1],dp[i-1][j]);
        }
    }
    int ans = dp[m][n];
    for(int i=0;i<=m;i++)
        delete[] dp[i];
    delete [] dp;
    return ans;
}

//Recursive

#include<iostream>
#include<cstring>
using namespace std;

int helper(string s1,string s2, int m, int n, int** dp){
    if(m==0 || n==0) return 0;
    if(dp[m][n]>-1) return dp[m][n];
    int ans;
    if(s1[0] == s2[0])
        ans = 1 + helper(s1.substr(1),s2.substr(1),m-1,n-1,dp);
    else {
        int op1 = helper(s1.substr(1),s2,m-1,n,dp);
        int op2 = helper(s1,s2.substr(1),m,n-1,dp);
        ans = max(op1,op2);
    }
    dp[m][n] = ans;
    return ans;
        
}

int lcs(string s1, string s2){
    int m = s1.length();
    int n = s2.length();
    int** dp = new int*[m+1];
    for(int i=0;i<=m;i++){
        dp[i] = new int[n+1];
        for(int j=0;j<=n;j++)
            dp[i][j] = -1;
    }
    int ans = helper(s1,s2,m,n,dp);
    for(int i=0;i<=m;i++)
        delete[] dp[i];
    delete [] dp;
    return ans;
}
