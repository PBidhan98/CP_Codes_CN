#include <bits/stdc++.h>
using namespace std;

int LCS(string s1, string s2, int m,int n,int k,int*** dp){
    if(k<=0) return 0;
    if(m==0||n==0) {
        if(k>0) return INT_MIN;
        return 0;
    }
    if(dp[m][n][k]!=-1) return dp[m][n][k];
    int ans;
    if(s1[0]==s2[0]) {
        int b1 = s1[0]+LCS(s1.substr(1),s2.substr(1),m-1,n-1,k-1,dp);
        int b2 = LCS(s1.substr(1),s2.substr(1),m-1,n-1,k,dp);
        ans = max(b1,b2);
    }else{
        int b3 = LCS(s1.substr(1),s2,m-1,n,k,dp);
        int b4 = LCS(s1,s2.substr(1),m,n-1,k,dp);
        ans = max(b3,b4);
    }
    dp[m][n][k] = ans;
    return ans;
}

int main()
{
    int t;
    cin>>t;
    while(t--){
        string s1,s2;
        cin>>s1>>s2;
        int k;
        cin>>k;
        int m,n;
        m=s1.length();
        n=s2.length();
        int*** dp = new int**[m+1];
        for(int i=0;i<=m;i++){
            dp[i] = new int*[n+1];
            for(int j=0;j<=n;j++){
                dp[i][j] = new int[k+1];
                for(int p=0;p<=k;p++) dp[i][j][p] = -1;
            }
        }
        int ans = LCS(s1,s2,m,n,k,dp);
        if(ans<0) cout<<0<<endl;
        else cout<<ans<<endl;
    }
    return 0;
}
