//Gary has two string S and V. Now Gary wants to know the length shortest subsequence in S such that it is not a subsequence in V.

using namespace std;
int helper(string s1,string s2, int m, int n, int** dp){
    if(m==0) return 100000;
    if(n<=0) return 1;
    if(dp[m][n]!=-1) return dp[m][n];
    int op1 = helper(s1.substr(1),s2,m-1,n,dp);
    int i=0,op2=0;
    for(i=0;i<n;i++)
        if(s2[i]==s1[0]) break;
    //character not found in string 2
    if(i==n) return 1;
    op2 = 1+helper(s1.substr(1),s2.substr(i+1),m-1,n-i-1,dp);
    int ans = min(op1,op2);
    dp[m][n] = ans;
    return ans;
}
int solve(string S,string V) { 
    int m = S.length();
    int n = V.length();
    int** dp = new int*[m+1];
    for(int i=0;i<=m;i++){
        dp[i] = new int[n+1];
        for(int j=0;j<=n;j++)
            dp[i][j] = -1;
    }
    int ans = helper(S,V,m,n,dp);
    for(int i=0;i<=m;i++)
        delete[] dp[i];
    delete [] dp;
    return ans;
}
