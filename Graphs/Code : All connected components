// Given an undirected graph G(V,E), find and print all the connected components of the given graph G.
// V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
// E is the number of edges present in graph G.
// You need to take input in main and create a function which should return all the connected components. And then print them in the main, not inside function.
// Print different components in new line. And each component should be printed in increasing order (separated by space). Order of different components doesn't matter.

#include <bits/stdc++.h>
using namespace std;

void allDFS(int** edges,int n,int sv,bool* visited,vector<int> &ans){
    ans.push_back(sv);
    visited[sv] = true;
    for(int i=0;i<n;i++){
        if(i==sv) continue;
        if(edges[sv][i]==1){
            if(visited[i]) continue;
            allDFS(edges,n,i,visited,ans);
        }
    }
}

int main() {
    int V, E;
    cin >> V >> E;
    int** edges = new int*[V];
    for(int i=0;i<V;i++){
        edges[i] = new int[V];
        for(int j=0;j<V;j++) edges[i][j] = 0;
    }
    for(int i=0;i<E;i++){
        int f,s;
        cin>>f>>s;
        edges[f][s] = 1;
        edges[s][f] = 1;
    }
    bool* visited = new bool[V];
    for(int i=0;i<V;i++) visited[i] = 0;
    for(int i=0;i<V;i++){
        if(!visited[i]){
            vector<int> ans;
            allDFS(edges,V,i,visited,ans);
            sort(ans.begin(), ans.end());
            for(int j=0;j<ans.size();j++)
                cout<<ans[j]<<" "; 
            cout<<endl;
        }
    }
  return 0;
}
