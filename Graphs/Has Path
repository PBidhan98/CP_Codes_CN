// Given an undirected graph G(V, E) and two vertices v1 and v2(as integers), check if there exists any path between them or not. Print true or false.
// V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
// E is the number of edges present in graph G.

#include <bits/stdc++.h>
using namespace std;

int printBFS(int**edges,int n,int sv,int end,bool* visited){
    queue<int> Q;
    Q.push(sv);
    visited[sv] = true;
    while(!Q.empty()){
        sv = Q.front();
        Q.pop();
        for(int i=0;i<n;i++){
            if(i==sv) continue;
            if(edges[sv][i]==1){
                if(visited[i]) continue;
                if(i==end) return 1;
                Q.push(i);
                visited[i] = true;
            }
        }
    }
    return 0;
}

int main() {
    int V, E;
    cin >> V >> E;
    int** edges = new int*[V];
    for(int i=0;i<V;i++){
        edges[i] = new int[V];
        for(int j=0;j<V;j++) edges[i][j] = 0;
    }
    for(int i=0;i<E;i++){
        int f,s;
        cin>>f>>s;
        edges[f][s] = 1;
        edges[s][f] = 1;
    }
    int start,end;
    cin>>start>>end;
    bool* visited = new bool[V];
    for(int i=0;i<V;i++) visited[i] = false;
    if(edges[start][end]==1) cout<<"true";
    else {
        int ans = printBFS(edges,V,start,end,visited);
        if(ans==0) cout<<"false";
        else cout<<"true";
    }
  return 0;
}
