// Given a graph with N vertices (numbered from 1 to N) and Two Lists (U,V) of size M where (U[i],V[i]) and (V[i],U[i]) are connected by an edge , then count the distinct 3-cycles in the graph. A 3-cycle PQR is a cycle in which (P,Q), (Q,R) and (R,P) are connected an edge.

#include <iostream>
using namespace std;

int solve(int V,int E,vector<int>u,vector<int>v){
    int** edges = new int*[V];
	for(int i=0;i<V;i++){
        edges[i] = new int[V];
        for(int j=0;j<V;j++) edges[i][j] = 0;
    }
    for(int i=0;i<E;i++){
        int f,s;
        f = u[i]-1;
        s = v[i]-1;
        edges[f][s] = 1;
        edges[s][f] = 1;
    }
    int count=0;
    for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
            if(edges[i][j]==1){
                for(int k=0;k<V;k++){
                    if(k==i) continue;
                    if(edges[j][k]==1){
                        if(edges[k][i]==1) count++;
                    }
                }
            }
        }
    }
    return count/6;
}
