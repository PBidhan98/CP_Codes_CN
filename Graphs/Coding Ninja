// Given a NxM matrix containing Uppercase English Alphabets only. Your task is to tell if there is a path in the given matrix which makes the sentence “CODINGNINJA” .
// There is a path from any cell to all its neighbouring cells. A neighbour may share an edge or a corner.

using namespace std;

int code(char graph[][MAXN],int n, int m,int i,int j,char s[],int size,bool** visited){
    visited[i][j] = true;
    if(i==n-1 && j==m-1){
        if(graph[i][j]==s[0] && size>0) return 1;
    }
    if(size==0) return 1;
    //north
    if(i>=0 && j-1>=0){
        if(graph[i][j-1]==s[0] && size>0){
            if(visited[i][j-1]==false){
                int a = code(graph,n,m,i,j-1,s+1,size-1,visited);
                if(a==1) return 1;
            }
        }
    }
    //north-east
    if(i+1<n && j-1>=0){
        if(graph[i+1][j-1]==s[0] && size>0){
            if(visited[i+1][j-1]==false){
                int b = code(graph,n,m,i+1,j-1,s+1,size-1,visited);
                if(b==1) return 1;
            }
        }
    }
    //east
    if(i+1<n && j>=0){
        if(graph[i+1][j]==s[0] && size>0){
            if(visited[i+1][j]==false){
                int c = code(graph,n,m,i+1,j,s+1,size-1,visited);
                if(c==1) return 1;
            }
        }
    }
    //south-east
    if(i+1<n && j+1<m){
        if(graph[i+1][j+1]==s[0] && size>0){
            if(visited[i+1][j+1]==false){
                int d = code(graph,n,m,i+1,j+1,s+1,size-1,visited);
                if(d==1) return 1;
            }
        }
    }
    //south
    if(i>=0 && j+1<m){
        if(graph[i][j+1]==s[0] && size>0){
            if(visited[i][j+1]==false){
                int e = code(graph,n,m,i,j+1,s+1,size-1,visited);
                if(e==1) return 1;
            }
        }
    }
    //south-west
    if(i-1>=0 && j+1<m){
        if(graph[i-1][j+1]==s[0] && size>0){
            if(visited[i-1][j+1]==false){
                int f = code(graph,n,m,i-1,j+1,s+1,size-1,visited);
                if(f==1) return 1;
            }
        }
    }
    //west
    if(i-1>=0 && j>=0){
        if(graph[i-1][j]==s[0] && size>0){
            if(visited[i-1][j]==false){
                int g = code(graph,n,m,i-1,j,s+1,size-1,visited);
                if(g==1) return 1;
            }
        }
    }
    //north-west
    if(i-1>=0 && j-1>=0){
        if(graph[i-1][j-1]==s[0] && size>0){
            if(visited[i-1][j-1]==false){
                int h = code(graph,n,m,i-1,j-1,s+1,size-1,visited);
                if(h==1) return 1;
            }
        }
    }
    visited[i][j]=false;
    return 0;
}

int solve(char graph[][MAXN],int N, int M){
    char s[]="CODINGNINJA";
    int size = strlen(s);
    bool** visited = new bool*[N];
    for(int i=0;i<N;i++){
        visited[i] = new bool[M];
        for(int j=0;j<M;j++){
            visited[i][j] = false;
        }
    }
    for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
            if(graph[i][j]==s[0]){
                int x = code(graph,N,M,i,j,s+1,size-1,visited);
                if(x==1) return 1;
            }
        }
    }
    return 0;
}
