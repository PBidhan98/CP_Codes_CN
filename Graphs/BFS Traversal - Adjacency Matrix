// Given an undirected and connected graph G(V, E), print its BFS traversal.
// Here you need to consider that you need to print BFS path starting from vertex 0 only.
// V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
// E is the number of edges present in graph G.
// Note : 1. Take graph input in the adjacency matrix.
// 2. Handle for Disconnected Graphs as well

#include <bits/stdc++.h>
using namespace std;

void printBFS(int**edges,int n,int startingV,bool* visited){
    int sv;
    sv=startingV;
    queue<int> Q;
    Q.push(sv);
    visited[sv] = true;
    while(!Q.empty()){
        sv = Q.front();
        Q.pop();
        cout<<sv<<" ";
        for(int i=0;i<n;i++){
            if(i==sv) continue;
            if(edges[sv][i]==1){
                if(visited[i]) continue;
                Q.push(i);
                visited[i] = true;
            }
        }
    }
}

void BFS(int** edges,int n){
    bool* visited = new bool[n];
    for(int i=0;i<n;i++) visited[i] = false;
    for(int i=0;i<n;i++){
        if(visited[i]==0) printBFS(edges,n,i,visited);
    }
    delete [] visited;
}

int main() {
    int V, E;
    cin >> V >> E;
    int** edges = new int*[V];
    for(int i=0;i<V;i++){
        edges[i] = new int[V];
        for(int j=0;j<V;j++) edges[i][j] = 0;
    }
    for(int i=0;i<E;i++){
        int f,s;
        cin>>f>>s;
        edges[f][s] = 1;
        edges[s][f] = 1;
    }
    BFS(edges,V);
  return 0;
}
