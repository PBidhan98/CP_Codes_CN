// Given an undirected graph G(V,E), check if the graph G is connected graph or not.
// V is the number of vertices present in graph G and vertices are numbered from 0 to V-1.
// E is the number of edges present in graph G.

#include <iostream>
using namespace std;

void DFS(int** edges,int n,int sv,bool* visited){
    visited[sv] = true;
    for(int i=0;i<n;i++){
        if(i==sv) continue;
        if(edges[sv][i]==1){
            if(visited[i]) continue;
            DFS(edges,n,i,visited);
        }
    }
}

int main() {
    int V, E;
    cin >> V >> E;
    int** edges = new int*[V];
    for(int i=0;i<V;i++){
        edges[i] = new int[V];
        for(int j=0;j<V;j++) edges[i][j] = 0;
    }
    for(int i=0;i<E;i++){
        int f,s;
        cin>>f>>s;
        edges[f][s] = 1;
        edges[s][f] = 1;
    }
    bool* visited = new bool[V];
    for(int i=0;i<V;i++) visited[i] = 0;
    DFS(edges,V,0,visited);
    for(int i=0;i<V;i++){
        if(visited[i]==0){
            cout<<"false";
            return 0;
        }
    }
    cout<<"true";
  return 0;
}
