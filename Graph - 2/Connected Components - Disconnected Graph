#include <iostream>
#include <vector>
#include <unordered_set>
using namespace std;

void dfs(int start, vector<int>* edges, int n, unordered_set<int>& visited, unordered_set<int> * component) {
	visited.insert(start);
	component->insert(start);
	vector<int>::iterator it = edges[start].begin();
	for (;it != edges[start].end(); it++) {
		int i = *it;
		if (visited.count(i) > 0) {
			continue;
		}
		dfs(i, edges,n, visited, component);
	}
}

unordered_set<unordered_set<int>*>* getComponents(vector<int>* edges, int n) {
	unordered_set<int> visited;
	unordered_set<unordered_set<int>*>* output = new unordered_set<unordered_set<int>*>();
	for (int i = 0; i < n; i++) {
		if (visited.count(i) == 0) {
			unordered_set<int> * component = new unordered_set<int>();
			dfs(i, edges,n, visited, component);
			output->insert(component);
		}
	}
	return output;
}

int main() {
	int n;
	cin >> n;
	vector<int>* edges = new vector<int>[n];
	int m;
	cin >> m;
	for (int i = 0; i < m; i++) {
		int j, k;
		cin >> j >> k;
		edges[j - 1].push_back(k - 1);
		edges[k - 1].push_back(j - 1);
	}
	unordered_set<unordered_set<int>*>* components = getComponents(edges, n);
	unordered_set<unordered_set<int>*>::iterator it = components->begin();
	while (it != components->end()) {
		unordered_set<int>* component = *it;
		unordered_set<int>::iterator it2 = component->begin();
		while (it2 != component->end()) {
			cout << *it2 + 1 << " ";
			it2++;
		}
		cout << endl;
		delete component;
		it++;
	}
	delete components;
	delete edges;
}

                                              //ORRRRRRRRRRRRRRRRRRR
                                              
#include<bits/stdc++.h>
using namespace std;

void dfs(vector<int>* edges,int sv,vector<int> &component,bool* visited){
    visited[sv]=true;
    component.push_back(sv);
    for(int i=0;i<edges[sv].size();i++){
        int next = edges[sv][i];
        if(!visited[next]){
            dfs(edges,next,component,visited);
        }
    }
}

vector<vector<int>> getComponents(vector<int>* edges,int n){
    bool* visited = new bool[n]();
    vector<vector<int>> output;
    for(int i=0;i<n;i++){
        if(!visited[i]){
            vector<int> component;
            dfs(edges,i,component,visited);
            output.push_back(component);
        }
    }
    delete[] visited;
    return output;
}

int main()
{
    int n,m;
    cin>>n>>m;
    vector<int>* edges = new vector<int>[n];
    for(int i=0;i<m;i++){
        int a,b;
        cin>>a>>b;
        edges[a-1].push_back(b-1);
        edges[b-1].push_back(a-1);
    }
    vector<vector<int>> ans = getComponents(edges,n);
    for(int i=0;i<ans.size();i++){
        for(int j=0;j<ans[i].size();j++){
            cout<<ans[i][j]+1<<" ";
        }
        cout<<endl;
    }
	return 0;
}

                                              
