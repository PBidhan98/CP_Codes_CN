#include<bits/stdc++.h>
using namespace std;

void dfs(vector<int>* edges,int start,bool* &visited,stack<int> &s){
    visited[start] = true;
    for(int i=0;i<edges[start].size();i++){
        int next = edges[start][i];
        if(visited[next]==false) dfs(edges,next,visited,s);
    }
    s.push(start);
}

void dfs1(vector<int>* edges,int start,bool* &visited){
    visited[start] = true;
    for(int i=0;i<edges[start].size();i++){
        int next = edges[start][i];
        if(visited[next]==false) dfs1(edges,next,visited);
    }
}

int knocked(vector<int>* edges,int n){
    stack<int> s;
    bool* visited = new bool[n];
    for(int i=0;i<n;i++)  visited[i] = false;
    for(int i=0;i<n;i++){
        if(visited[i]==false) dfs(edges,i,visited,s);
    }
    for(int i=0;i<n;i++)  visited[i] = false;
    int count = 0;
    while(s.size()!=0){
        int ele = s.top();
        s.pop();
        if(visited[ele]==false) {
            count++;
            dfs1(edges,ele,visited);
        }
    }
    return count;
}

int main()
{
	int t;
    cin>>t;
    while(t--){
        int n,m;
        cin>>n>>m;
        vector<int>* edges = new vector<int>[n];
        for(int i=0;i<m;i++) {
            int x,y;
            cin>>x>>y;
            edges[x-1].push_back(y-1);
        }
        int ans = knocked(edges,n);
        cout<<ans<<endl;
    }
	return 0;
}
